{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","photo.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","_home_harsha_Documents_blockchain_dgram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_home_harsha_Documents_blockchain_dgram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_harsha_Documents_blockchain_dgram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","uploadImage","description","add","error","loading","dgram","methods","hash","send","from","account","on","tipImageOwner","id","tipAmount","value","images","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkID","networkData","Dgram","networks","Contract","abi","address","imageCount","imagesCount","i","image","concat","_home_harsha_Documents_blockchain_dgram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","sort","b","react__WEBPACK_IMPORTED_MODULE_8___default","_Navbar__WEBPACK_IMPORTED_MODULE_12__","className","_Main__WEBPACK_IMPORTED_MODULE_13__","Component","Navbar","react__WEBPACK_IMPORTED_MODULE_5___default","href","rel","src","photo","width","height","alt","Identicon","toString","module","exports","__webpack_require__","p","Main","role","style","maxWidth","onSubmit","imageDescription","type","accept","onChange","ref","input","placeholder","required","map","key","author","utils","fromWei","name","onClick","toWei"],"mappings":"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","file":"static/js/main.085c0a9c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport Dgram from \"../abis/Dgram.json\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\n\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\n\nclass App extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      dgram: [],\n      images: [],\n      loading: true,\n    };\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    const networkID = await web3.eth.net.getId();\n    const networkData = Dgram.networks[networkID];\n\n    if (networkData) {\n      const dgram = web3.eth.Contract(Dgram.abi, networkData.address);\n      this.setState({ dgram });\n      const imagesCount = await dgram.methods.imageCount().call();\n\n      for (let i = 1; i <= imagesCount; i++) {\n        const image = await dgram.methods.images(i).call();\n        this.setState({ images: [...this.state.images, image] });\n      }\n\n      this.setState({\n        images: this.state.images.sort((a, b) => b.tipAmount - a.tipAmount),\n      });\n\n      this.setState({ imagesCount, loading: false });\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) });\n      console.log(\"buffer\", this.state.buffer);\n    };\n  };\n\n  uploadImage = (description) => {\n    console.log(\"Submitting file to ipfs...\");\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log(\"Ipfs result\", result);\n      if (error) {\n        console.error(error);\n        return;\n      }\n\n      this.setState({ loading: true });\n      this.state.dgram.methods\n        .uploadImage(result[0].hash, description)\n        .send({ from: this.state.account })\n        .on(\"transactionHash\", (hash) => {\n          this.setState({ loading: false });\n        });\n    });\n  };\n\n  tipImageOwner = (id, tipAmount) => {\n    this.setState({ loading: true });\n    this.state.dgram.methods\n      .tipImageOwner(id)\n      .send({ from: this.state.account, value: tipAmount })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        {this.state.loading ? (\n          <div id=\"loader\" className=\"text-center mt-5\">\n            <p>Loading...</p>\n          </div>\n        ) : (\n          <Main\n            images={this.state.images}\n            captureFile={this.captureFile}\n            uploadImage={this.uploadImage}\n            tipImageOwner={this.tipImageOwner}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\nimport photo from \"../photo.png\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"www.google.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src={photo}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n            alt=\"\"\n          />\n          Dgram\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            {this.props.account ? (\n              <img\n                alt=\"stfu3\"\n                className=\"ml-2\"\n                width=\"30\"\n                height=\"30\"\n                src={`data:image/png;base64,${new Identicon(\n                  this.props.account,\n                  30\n                ).toString()}`}\n              />\n            ) : (\n              <span></span>\n            )}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","module.exports = __webpack_public_path__ + \"static/media/photo.d6cbd8e6.png\";","import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main\n            role=\"main\"\n            className=\"col-lg-12 ml-auto mr-auto\"\n            style={{ maxWidth: \"500px\" }}\n          >\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n              <h2>Share Image</h2>\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  const description = this.imageDescription.value;\n                  this.props.uploadImage(description);\n                }}\n              >\n                <input\n                  type=\"file\"\n                  accept=\".jpg, .jpeg, .png, .bmp, .gif\"\n                  onChange={this.props.captureFile}\n                />\n                <div className=\"form-group mr-sm-2\">\n                  <br></br>\n                  <input\n                    id=\"imageDescription\"\n                    type=\"text\"\n                    ref={(input) => {\n                      this.imageDescription = input;\n                    }}\n                    className=\"form-control\"\n                    placeholder=\"Image description...\"\n                    required\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary btn-block btn-lg\"\n                >\n                  Upload!\n                </button>\n              </form>\n\n              <p>&nbsp;</p>\n              {this.props.images.map((image, key) => {\n                return (\n                  <div className=\"card mb-4\" key={key}>\n                    <div className=\"card-header\">\n                      <img\n                        alt=\"stfu\"\n                        className=\"mr-2\"\n                        width=\"30\"\n                        height=\"30\"\n                        src={`data:image/png;base64,${new Identicon(\n                          image.author,\n                          30\n                        ).toString()}`}\n                      />\n                      <small className=\"text-muted\">{image.author}</small>\n                    </div>\n                    <ul id=\"imageList\" className=\"list-group list-group-flush\">\n                      <li className=\"list-group-item\">\n                        <p className=\"text-center\">\n                          <img\n                            alt=\"stfu2\"\n                            src={`https://ipfs.infura.io/ipfs/${image.hash}`}\n                            style={{ maxWidth: \"420px\" }}\n                          />\n                        </p>\n                        <p>{image.description}</p>\n                      </li>\n                      <li key={key} className=\"list-group-item py-2\">\n                        <small className=\"float-left mt-1 text-muted\">\n                          TIPS:{\" \"}\n                          {window.web3.utils.fromWei(\n                            image.tipAmount.toString(),\n                            \"Ether\"\n                          )}{\" \"}\n                          ETH\n                        </small>\n                        <button\n                          className=\"btn btn-link btn-sm float-right pt-0\"\n                          name={image.id}\n                          onClick={(event) => {\n                            let tipAmount = window.web3.utils.toWei(\n                              \"0.1\",\n                              \"Ether\"\n                            );\n                            console.log(event.target.name, tipAmount);\n                            this.props.tipImageOwner(\n                              event.target.name,\n                              tipAmount\n                            );\n                          }}\n                        >\n                          TIP 0.1 ETH\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                );\n              })}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"],"sourceRoot":""}